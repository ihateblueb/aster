use clap::{Arg, Command};

fn main() {
    let matches = Command::new(env!("CARGO_PKG_NAME"))
        .version(env!("CARGO_PKG_VERSION"))
        .author(env!("CARGO_PKG_AUTHORS"))
        .about(env!("CARGO_PKG_DESCRIPTION"))
		.subcommands([
			Command::new("user")
        		.about("Manage users")
				.subcommands([
					Command::new("create")
						.about("Create a new user")
						.arg(Arg::new("username")
							.short('u')
							.long("username")
							.required(true)
							.help("Set username"))
						.arg(Arg::new("displayname")
							.short('d')
							.long("displayname")
							.required(false)
							.help("Set displayname"))
						.arg(Arg::new("locked")
							.short('l')
							.long("locked")
							.required(false)
							.help("Set if user is locked"))
						.arg(Arg::new("discoverable")
							.short('s')
							.long("discoverable")
							.required(false)
							.help("Set if user is discoverable"))
						.arg(Arg::new("automated")
							.short('a')
							.long("automated")
							.required(false)
							.help("Set if user is automated"))
						.arg(Arg::new("bio")
							.short('b')
							.long("bio")
							.required(false)
							.help("Set bio"))
						.arg(Arg::new("is_cat")
							.short('c')
							.long("is_cat")
							.required(false)
							.help("Set is user is a cat"))
						.arg(Arg::new("speak_as_cat")
							.short('k')
							.long("speak_as_cat")
							.required(false)
							.help("Set is user speaks as a cat"))
						.arg(Arg::new("password")
							.short('p')
							.long("password")
							.required(true)
							.help("Set password")),

					Command::new("edit")
						.about("Edit an existing user")
						.arg(Arg::new("id")
							.short('i')
							.long("id")
							.required(true)
							.help("ID of user to edit"))
						.arg(Arg::new("username")
							.short('u')
							.long("username")
							.required(false)
							.help("Change username"))
						.arg(Arg::new("displayname")
							.short('d')
							.long("displayname")
							.required(false)
							.help("Change displayname"))
						.arg(Arg::new("locked")
							.short('l')
							.long("locked")
							.required(false)
							.help("Change if user is locked"))
						.arg(Arg::new("discoverable")
							.short('s')
							.long("discoverable")
							.required(false)
							.help("Change if user is discoverable"))
						.arg(Arg::new("automated")
							.short('a')
							.long("automated")
							.required(false)
							.help("Change if user is automated"))
						.arg(Arg::new("bio")
							.short('b')
							.long("bio")
							.required(false)
							.help("Change bio"))
						.arg(Arg::new("is_cat")
							.short('c')
							.long("is_cat")
							.required(false)
							.help("Change is user is a cat"))
						.arg(Arg::new("speak_as_cat")
							.short('k')
							.long("speak_as_cat")
							.required(false)
							.help("Change is user speaks as a cat"))
						.arg(Arg::new("password")
							.short('p')
							.long("password")
							.required(false)
							.help("Change password")),

					Command::new("delete")
						.about("Delete an existing user")
						.arg(Arg::new("id")
							.short('i')
							.long("id")
							.required(true)
							.help("ID of user to delete")),
				]),

			Command::new("note")
				.about("Manage notes")
				.subcommands([
					Command::new("create")
						.about("Create a new note")
						.arg(Arg::new("created_at")
							.short('c')
							.long("created_at")
							.required(false)
							.help("Set created at date of note"))
						.arg(Arg::new("visibility")
							.short('v')
							.long("visibility")
							.required(false)
							.help("Set visibility of note"))
						.arg(Arg::new("replying_to")
							.short('r')
							.long("replying_to")
							.required(false)
							.help("Set ID of note being replied to"))
						.arg(Arg::new("author")
							.short('a')
							.long("author")
							.required(true)
							.help("Set author of note"))
						.arg(Arg::new("cw")
							.short('w')
							.long("cw")
							.required(false)
							.help("Set content warning of note"))
						.arg(Arg::new("content")
							.short('n')
							.long("content")
							.required(true)
							.help("Set content of note"))
						.arg(Arg::new("emojis")
							.short('e')
							.long("emojis")
							.required(false)
							.help("Set emojis of note"))
						.arg(Arg::new("tags")
							.short('t')
							.long("tags")
							.required(false)
							.help("Set tags of note"))
						.arg(Arg::new("quoted")
							.short('q')
							.long("quoted")
							.required(false)
							.help("Set ID of note being quoted")),

					Command::new("edit")
						.about("Edit an existing note")
						.arg(Arg::new("id")
							.short('i')
							.long("id")
							.required(true)
							.help("ID of note to edit"))
						.arg(Arg::new("created_at")
							.short('c')
							.long("created_at")
							.required(false)
							.help("Change created at date of note"))
						.arg(Arg::new("visibility")
							.short('v')
							.long("visibility")
							.required(false)
							.help("Change visibility of note"))
						.arg(Arg::new("replying_to")
							.short('r')
							.long("replying_to")
							.required(false)
							.help("Change ID of note being replied to"))
						.arg(Arg::new("author")
							.short('a')
							.long("author")
							.required(false)
							.help("Change author of note"))
						.arg(Arg::new("cw")
							.short('w')
							.long("cw")
							.required(false)
							.help("Change content warning of note"))
						.arg(Arg::new("content")
							.short('n')
							.long("content")
							.required(false)
							.help("Change content of note"))
						.arg(Arg::new("emojis")
							.short('e')
							.long("emojis")
							.required(false)
							.help("Change emojis of note"))
						.arg(Arg::new("tags")
							.short('t')
							.long("tags")
							.required(false)
							.help("Change tags of note"))
						.arg(Arg::new("quoted")
							.short('q')
							.long("quoted")
							.required(false)
							.help("Change ID of note being quoted")),

					Command::new("delete")
						.about("Delete an existing note")
						.arg(Arg::new("id")
							.short('i')
							.long("id")
							.required(true)
							.help("ID of note to delete")),
				]),

			Command::new("instance")
				.about("Manage instances")
				.subcommands([
					Command::new("edit")
						.about("Edit an instance"),
					Command::new("delete")
						.about("Delete an instance"),
					Command::new("purge")
						.about("Delete an instance and purge all of the users and notes from it"),
					Command::new("block")
						.about("Block an instance"),
					Command::new("silence")
						.about("Silence an instance"),
				]),

			Command::new("meta")
        		.about("Manage instance metadata")
				.subcommands([
					Command::new("edit")
						.about("Modify value of instance metadata"),
					Command::new("reset")
						.about("Reset instance metadata to original state"),
				]),

			Command::new("drive")
				.about("Manage user uploaded content")
				.subcommands([
					Command::new("create")
						.about("Create a new drive file"),
					Command::new("edit")
						.about("Edit an existing drive file"),
					Command::new("delete")
						.about("Delete an existing drive file"),
				]),
		])
		.get_matches();

	println!("{:?}", matches);
}
